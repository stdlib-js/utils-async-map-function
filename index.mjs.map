{"version":3,"file":"index.mjs","sources":["../lib/validate.js","../lib/limit.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isObject from '@stdlib/assert-is-plain-object' ;\nimport hasOwnProp from '@stdlib/assert-has-own-property' ;\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean' ;\nimport { isPrimitive as isPositiveInteger } from '@stdlib/assert-is-positive-integer' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series] - boolean indicating whether to wait for a previous invocation to complete before the next invocation\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'thisArg': {},\n*     'series': false,\n*     'limit': 10\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( '0iX2h', options ) );\n\t}\n\tif ( hasOwnProp( options, 'thisArg' ) ) {\n\t\topts.thisArg = options.thisArg;\n\t}\n\tif ( hasOwnProp( options, 'series' ) ) {\n\t\topts.series = options.series;\n\t\tif ( !isBoolean( opts.series ) ) {\n\t\t\treturn new TypeError( format( '0iX30', 'series', opts.series ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'limit' ) ) {\n\t\topts.limit = options.limit;\n\t\tif ( !isPositiveInteger( opts.limit ) ) {\n\t\t\treturn new TypeError( format( '0iX3b', 'limit', opts.limit ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nexport default validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport logger from 'debug' ;\n\n\n// VARIABLES //\n\nvar debug = logger( 'map-function-async:limit' );\n\n\n// MAIN //\n\n/**\n* Invokes a function `n` times, limiting the number of concurrently pending invocations, and returns an array of accumulated function return values.\n*\n* @private\n* @param {NonNegativeInteger} n - number of function invocations\n* @param {Options} opts - function options\n* @param {*} [opts.thisArg] - execution context\n* @param {PositiveInteger} [opts.limit] - maximum number of pending function invocations\n* @param {Function} fcn - function to invoke\n* @param {Callback} done - function to invoke upon completion or upon encountering an error\n* @returns {void}\n*/\nfunction limit( n, opts, fcn, done ) {\n\tvar count;\n\tvar flg;\n\tvar out;\n\tvar lim;\n\tvar idx;\n\tvar m;\n\tvar i;\n\n\tdebug( 'Number of invocations: %d', n );\n\n\t// Note: we explicitly preallocate in order to facilitate inserting a function result into its associated output array index. This means we do not ensure \"fast\" elements for large output arrays.\n\tout = new Array( n );\n\tif ( n === 0 ) {\n\t\tdebug( 'Finished invoking a function.' );\n\t\treturn done( null, out );\n\t}\n\tif ( n < opts.limit ) {\n\t\tlim = n;\n\t} else {\n\t\tlim = opts.limit;\n\t}\n\tdebug( 'Concurrency limit: %d', lim );\n\n\tcount = 0;\n\tidx = -1;\n\tm = n - 1;\n\tfor ( i = 0; i < lim; i++ ) {\n\t\t// This guard is necessary to protect against synchronous functions which exhaust all invocations...\n\t\tif ( idx < m ) {\n\t\t\tnext(); // eslint-disable-line node/callback-return\n\t\t}\n\t}\n\t/**\n\t* Callback to process the next function invocation.\n\t*\n\t* @private\n\t*/\n\tfunction next() {\n\t\tvar j;\n\t\tidx += 1;\n\t\tj = idx;\n\t\tdebug( 'Invocation number: %d', j );\n\t\tfcn.call( opts.thisArg, j, cb );\n\n\t\t/**\n\t\t* Callback invoked once a provided function completes.\n\t\t*\n\t\t* @private\n\t\t* @param {*} [error] - error\n\t\t* @param {*} [result] - result\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction cb( error, result ) {\n\t\t\tif ( flg ) {\n\t\t\t\t// Prevent further invocations:\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ( error ) {\n\t\t\t\tflg = true;\n\t\t\t\treturn clbk( error );\n\t\t\t}\n\t\t\tout[ j ] = result;\n\t\t\tclbk();\n\t\t}\n\t}\n\n\t/**\n\t* Callback invoked once ready to process the next invocation.\n\t*\n\t* @private\n\t* @param {*} [error] - error\n\t* @returns {void}\n\t*/\n\tfunction clbk( error ) {\n\t\tif ( error ) {\n\t\t\tdebug( 'Encountered an error: %s', error.message );\n\t\t\treturn done( error );\n\t\t}\n\t\tcount += 1;\n\t\tdebug( 'Completed invocation %d of %d.', count, n );\n\t\tif ( idx < m ) {\n\t\t\treturn next();\n\t\t}\n\t\tif ( count === n ) {\n\t\t\tdebug( 'Finished invoking a function.' );\n\t\t\treturn done( null, out );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default limit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isFunction from '@stdlib/assert-is-function' ;\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport PINF from '@stdlib/constants-float64-pinf' ;\nimport validate from './validate.js' ;\nimport limit from './limit.js' ;\n\n\n// MAIN //\n\n/**\n* Returns a function to invoke a function `n` times and return an array of accumulated function return values.\n*\n* ## Notes\n*\n* -   If a provided function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n*\n*\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function again\n* @param {Function} fcn - function to invoke\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {Function} function which invokes a function `n` times and returns an array of accumulated function return values\n*\n* @example\n* function fcn( i, next ) {\n*     setTimeout( onTimeout, 0 );\n*     function onTimeout() {\n*         next( null, i );\n*     }\n* }\n*\n* var opts = {\n*     'series': true\n* };\n*\n* var mapFunAsync = factory( opts, fcn );\n*\n* function done( error, results ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( results );\n* }\n*\n* mapFunAsync( 10, done );\n*/\nfunction factory( options, fcn ) {\n\tvar opts;\n\tvar err;\n\tvar f;\n\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t\tf = fcn;\n\t} else {\n\t\tf = options;\n\t}\n\tif ( !isFunction( f ) ) {\n\t\tthrow new TypeError( format( '0iX43', f ) );\n\t}\n\tif ( opts.series ) {\n\t\topts.limit = 1;\n\t} else if ( !opts.limit ) {\n\t\topts.limit = PINF;\n\t}\n\treturn mapFunAsync;\n\n\t/**\n\t* Invokes a function `n` times and returns an array of accumulated function return values.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} n - number of function invocations\n\t* @param {Callback} done - function to invoke upon completion\n\t* @throws {TypeError} first argument must be a nonnegative integer\n\t* @throws {TypeError} last argument must be a function\n\t* @returns {void}\n\t*/\n\tfunction mapFunAsync( n, done ) {\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( '0iXBR', n ) );\n\t\t}\n\t\tif ( !isFunction( done ) ) {\n\t\t\tthrow new TypeError( format( '0iX43', done ) );\n\t\t}\n\t\treturn limit( n, opts, f, clbk );\n\n\t\t/**\n\t\t* Callback invoked upon completion.\n\t\t*\n\t\t* @private\n\t\t* @param {(Error|null)} error - error object\n\t\t* @param {Array} results - results\n\t\t* @returns {void}\n\t\t*/\n\t\tfunction clbk( error, results ) {\n\t\t\tif ( error ) {\n\t\t\t\treturn done( error );\n\t\t\t}\n\t\t\tdone( null, results );\n\t\t}\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\n/**\n* Invokes a function `n` times and returns an array of accumulated function return values.\n*\n* ## Notes\n*\n* -   If a provided function calls the provided callback with a truthy error argument, the function suspends execution and immediately calls the `done` callback for subsequent error handling.\n* -   This function does **not** guarantee that execution is asynchronous. To do so, wrap the `done` callback in a function which either executes at the end of the current stack (e.g., `nextTick`) or during a subsequent turn of the event loop (e.g., `setImmediate`, `setTimeout`).\n*\n*\n* @param {Function} fcn - function to invoke\n* @param {NonNegativeInteger} n - number of function invocations\n* @param {Options} [options] - function options\n* @param {*} [options.thisArg] - execution context\n* @param {PositiveInteger} [options.limit] - maximum number of pending invocations at any one time\n* @param {boolean} [options.series=false] - boolean indicating whether to wait for a previous invocation to complete before invoking a provided function again\n* @param {Function} done - callback to invoke upon invoking a function `n` times\n* @throws {TypeError} first argument must be a function\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} last argument must be a function\n* @returns {void}\n*\n* @example\n* function fcn( i, next ) {\n*     setTimeout( onTimeout, i );\n*     function onTimeout() {\n*         next( null, i );\n*     }\n* }\n*\n* function done( error, out ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( JSON.stringify( out ) );\n*     // => [ 0, 1, 2, 3, 4 ]\n* }\n*\n* mapFunAsync( fcn, 5, done );\n*/\nfunction mapFunAsync( fcn, n, options, done ) {\n\tif ( arguments.length < 4 ) {\n\t\treturn factory( fcn )( n, options );\n\t}\n\tfactory( options, fcn )( n, done );\n}\n\n\n// EXPORTS //\n\nexport default mapFunAsync;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Invoke a function `n` times and return an array of accumulated function return values.\n*\n* @module @stdlib/utils-async-map-function\n*\n* @example\n* import mapFunAsync from '@stdlib/utils-async-map-function' ;\n*\n* function fcn( i, next ) {\n*     setTimeout( onTimeout, i );\n*     function onTimeout() {\n*         next( null, i );\n*     }\n* }\n*\n* function done( error, out ) {\n*     if ( error ) {\n*         throw error;\n*     }\n*     console.log( JSON.stringify( out ) );\n*     // => [ 0, 1, 2, 3, 4 ]\n* }\n*\n* mapFunAsync( fcn, 5, done );\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport main from './main.js' ;\nimport factory from './factory.js' ;\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["validate","opts","options","isObject","hasOwnProp","thisArg","series","isBoolean","TypeError","format","limit","isPositiveInteger","debug","n","fcn","done","count","flg","out","lim","idx","m","i","Array","next","j","call","error","result","clbk","message","factory","err","f","arguments","length","isFunction","PINF","mapFunAsync","isNonNegativeInteger","results","setReadOnly","main"],"mappings":";;+3BAsDA,SAASA,EAAUC,EAAMC,GACxB,OAAMC,EAAUD,IAGXE,EAAYF,EAAS,aACzBD,EAAKI,QAAUH,EAAQG,SAEnBD,EAAYF,EAAS,YACzBD,EAAKK,OAASJ,EAAQI,QAChBC,EAAWN,EAAKK,SACd,IAAIE,UAAWC,EAAQ,QAAS,SAAUR,EAAKK,SAGnDF,EAAYF,EAAS,WACzBD,EAAKS,MAAQR,EAAQQ,OACfC,EAAmBV,EAAKS,QACtB,IAAIF,UAAWC,EAAQ,QAAS,QAASR,EAAKS,QAGhD,MAjBC,IAAIF,UAAWC,EAAQ,QAASP,GAkBzC,KC/CIU,SAiBJ,SAASF,EAAOG,EAAGZ,EAAMa,EAAKC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAMJ,GADAJ,EAAM,IAAIK,MAAOV,GACN,IAANA,EAEJ,OAAOE,EAAM,KAAMG,GAYpB,IATCC,EADIN,EAAIZ,EAAKS,MACPG,EAEAZ,EAAKS,MAIZM,EAAQ,EACRI,GAAO,EACPC,EAAIR,EAAI,EACFS,EAAI,EAAGA,EAAIH,EAAKG,IAEhBF,EAAMC,GACVG,IAQF,SAASA,IACR,IAAIC,EAEJA,EADAL,GAAO,EAGPN,EAAIY,KAAMzB,EAAKI,QAASoB,GAUxB,SAAaE,EAAOC,GACnB,GAAKX,EAEJ,OAED,GAAKU,EAEJ,OADAV,GAAM,EACCY,EAAMF,GAEdT,EAAKO,GAAMG,EACXC,GACA,GACD,CASD,SAASA,EAAMF,GACd,OAAKA,GACJf,EAAO,2BAA4Be,EAAMG,SAClCf,EAAMY,KAEdX,GAAS,EAEJI,EAAMC,EACHG,IAEHR,IAAUH,EAEPE,EAAM,KAAMG,QAFpB,EAIA,CACF,CC3DA,SAASa,EAAS7B,EAASY,GAC1B,IAAIb,EACA+B,EACAC,EAGJ,GADAhC,EAAO,CAAA,EACFiC,UAAUC,OAAS,EAAI,CAE3B,GADAH,EAAMhC,EAAUC,EAAMC,GAErB,MAAM8B,EAEPC,EAAInB,CACN,MACEmB,EAAI/B,EAEL,IAAMkC,EAAYH,GACjB,MAAM,IAAIzB,UAAWC,EAAQ,QAASwB,IAOvC,OALKhC,EAAKK,OACTL,EAAKS,MAAQ,EACDT,EAAKS,QACjBT,EAAKS,MAAQ2B,GAEPC,EAYP,SAASA,EAAazB,EAAGE,GACxB,IAAMwB,EAAsB1B,GAC3B,MAAM,IAAIL,UAAWC,EAAQ,QAASI,IAEvC,IAAMuB,EAAYrB,GACjB,MAAM,IAAIP,UAAWC,EAAQ,QAASM,IAEvC,OAAOL,EAAOG,EAAGZ,EAAMgC,GAUvB,SAAeN,EAAOa,GACrB,GAAKb,EACJ,OAAOZ,EAAMY,GAEdZ,EAAM,KAAMyB,EACZ,GACD,CACF,CCjEA,SAASF,EAAaxB,EAAKD,EAAGX,EAASa,GACtC,GAAKmB,UAAUC,OAAS,EACvB,OAAOJ,EAASjB,EAATiB,CAAgBlB,EAAGX,GAE3B6B,EAAS7B,EAASY,EAAlBiB,CAAyBlB,EAAGE,EAC7B,CClBA0B,EAAAC,EAAA,UAAAX"}